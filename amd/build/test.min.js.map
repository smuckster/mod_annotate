{"version":3,"sources":["../src/test.js"],"names":["init","container","document","querySelector","addEventListener","selection","window","getSelection","type","anchor","anchorNode","nodeType","parentNode","anchorElementIndex","getAttribute","anchorNodeIndex","Array","prototype","indexOf","call","childNodes","anchorOffset","focus","focusNode","focusElementIndex","focusNodeIndex","focusOffset","annotation","substring","swapAnnotationVariables","console","log","loadButton","on","text","anchorElement","focusElement","setBaseAndExtent","tempAnnotation"],"mappings":"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","sourcesContent":["import $ from 'jquery';\n\nexport const init = () => {\n    // Allow highlighted notes to be saved\n    let container = document.querySelector('.annotation-container');\n    container.addEventListener('mouseup', () => {\n        let selection = window.getSelection();\n        // Get properties for annotation object to store\n        // as long as the selection includes at least\n        // one character.\n        if(selection.type == 'Range') {\n            // If the anchor node of the selection is not\n            // an \"element\" node type (1), work through its\n            // parent nodes until the appropriate node type is found.\n            let anchor = selection.anchorNode;\n            while(anchor.nodeType != 1) {\n                anchor = anchor.parentNode;\n            }\n            // Now that we have the element node, grab its index\n            let anchorElementIndex = anchor.getAttribute('id');\n            // We also need to store the index of the #text node\n            // in the context of the anchor parent node's childNodes array.\n            let anchorNodeIndex = Array.prototype.indexOf.call(anchor.childNodes, selection.anchorNode);\n            let anchorOffset = selection.anchorOffset;\n\n            // Do the same for the focus node.\n            let focus = selection.focusNode;\n            while(focus.nodeType != 1) {\n                focus = focus.parentNode;\n            }\n            // Now that we have the element node, grab its index\n            let focusElementIndex = focus.getAttribute('id');\n            // Again, get the index of the child #text node\n            let focusNodeIndex = Array.prototype.indexOf.call(focus.childNodes, selection.focusNode);\n            let focusOffset = selection.focusOffset;\n\n            // Assemble a storable annotation object\n            let annotation = {\n                anchorElementIndex,\n                anchorOffset,\n                anchorNodeIndex,\n                focusElementIndex,\n                focusOffset,\n                focusNodeIndex\n            };\n\n            // If the focus node comes before the anchor node:\n            // (Compare the number from the node's id attribute,\n            // which begins at the 6th character of the id.)\n            if (Number(focusElementIndex.substring(6)) < Number(anchorElementIndex.substring(6))) {\n                annotation = swapAnnotationVariables(annotation);\n            }\n            // If the focus node is the same as the anchor node:\n            else if (Number(focusElementIndex.substring(6)) == Number(anchorElementIndex.substring(6))) {\n                // If the focus node's offset is smaller than\n                // the anchor node's offset:\n                if (selection.focusOffset < selection.anchorOffset) {\n                    annotation = swapAnnotationVariables(annotation);\n                }\n            }\n\n            // TODO:\n            // Let the user add a note to the selection.\n            // When the user clicks the \"save\" button, save\n            // the complete note + annotation in the database.\n\n            window.console.log(annotation);\n        }\n    });\n\n    // Allow saved notes to be retrieved\n    let loadButton = $('.load-button');\n    loadButton.on('click', () => {\n        // Dummy annotation object for testing\n        let annotation = {\n            anchorElementIndex: 'index-2',\n            anchorOffset: 108,\n            anchorNodeIndex: 0,\n            focusElementIndex: 'index-2',\n            focusOffset: 124,\n            focusNodeIndex: 0,\n            text: 'im et ante moles'\n        };\n\n        let anchorElement = document.querySelector(`#${annotation.anchorElementIndex}`);\n        let focusElement = document.querySelector(`#${annotation.focusElementIndex}`);\n\n        let anchorNode = anchorElement.childNodes[annotation.anchorNodeIndex];\n        let focusNode = focusElement.childNodes[annotation.focusNodeIndex];\n\n        let selection = window.getSelection();\n        // selection.removeAllRanges();\n        // selection.addRange(new Range());\n        selection.setBaseAndExtent(anchorNode, annotation.anchorOffset, focusNode, annotation.focusOffset);\n\n        // Add an absolutely positioned element above the highlighted text\n    });\n};\n\nconst swapAnnotationVariables = annotation => {\n    const tempAnnotation = {...annotation};\n\n    // Swap anchor and focus variables\n    annotation.anchorElementIndex = tempAnnotation.focusElementIndex;\n    annotation.anchorOffset = tempAnnotation.focusOffset;\n    annotation.anchorNodeIndex = tempAnnotation.focusNodeIndex;\n    annotation.focusElementIndex = tempAnnotation.anchorElementIndex;\n    annotation.focusOffset = tempAnnotation.anchorOffset;\n    annotation.focusNodeIndex = tempAnnotation.anchorNodeIndex;\n\n    return annotation;\n};"],"file":"test.min.js"}