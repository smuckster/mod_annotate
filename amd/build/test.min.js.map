{"version":3,"sources":["../src/test.js"],"names":["init","container","document","querySelector","addEventListener","selection","window","getSelection","type","anchor","anchorNode","nodeType","parentNode","anchorElementIndex","getAttribute","anchorNodeIndex","Array","prototype","indexOf","call","childNodes","focus","focusNode","focusElementIndex","focusNodeIndex","annotation","anchorOffset","focusOffset","text","toString","console","log","loadButton"],"mappings":"uIAEoB,QAAPA,CAAAA,IAAO,EAAM,CAEtB,GAAIC,CAAAA,CAAS,CAAGC,QAAQ,CAACC,aAAT,CAAuB,uBAAvB,CAAhB,CACAF,CAAS,CAACG,gBAAV,CAA2B,SAA3B,CAAsC,UAAM,CACxC,GAAIC,CAAAA,CAAS,CAAGC,MAAM,CAACC,YAAP,EAAhB,CAIA,GAAqB,OAAlB,EAAAF,CAAS,CAACG,IAAb,CAA8B,CAI1B,GAAIC,CAAAA,CAAM,CAAGJ,CAAS,CAACK,UAAvB,CACA,MAAyB,CAAnB,EAAAD,CAAM,CAACE,QAAb,CAA4B,CACxBF,CAAM,CAAGA,CAAM,CAACG,UACnB,CAPyB,GAStBC,CAAAA,CAAkB,CAAGJ,CAAM,CAACK,YAAP,CAAoB,IAApB,CATC,CAYtBC,CAAe,CAAGC,KAAK,CAACC,SAAN,CAAgBC,OAAhB,CAAwBC,IAAxB,CAA6BV,CAAM,CAACW,UAApC,CAAgDf,CAAS,CAACK,UAA1D,CAZI,CAetBW,CAAK,CAAGhB,CAAS,CAACiB,SAfI,CAgB1B,MAAwB,CAAlB,EAAAD,CAAK,CAACV,QAAZ,CAA2B,CACvBU,CAAK,CAAGA,CAAK,CAACT,UACjB,CAlByB,GAoBtBW,CAAAA,CAAiB,CAAGF,CAAK,CAACP,YAAN,CAAmB,IAAnB,CApBE,CAsBtBU,CAAc,CAAGR,KAAK,CAACC,SAAN,CAAgBC,OAAhB,CAAwBC,IAAxB,CAA6BE,CAAK,CAACD,UAAnC,CAA+Cf,CAAS,CAACiB,SAAzD,CAtBK,CAyBtBG,CAAU,CAAG,CACbZ,kBAAkB,CAAEA,CADP,CAEba,YAAY,CAAErB,CAAS,CAACqB,YAFX,CAGbX,eAAe,CAAEA,CAHJ,CAIbQ,iBAAiB,CAAEA,CAJN,CAKbI,WAAW,CAAEtB,CAAS,CAACsB,WALV,CAMbH,cAAc,CAAEA,CANH,CAObI,IAAI,CAAEvB,CAAS,CAACwB,QAAV,EAPO,CAzBS,CAkC1BvB,MAAM,CAACwB,OAAP,CAAeC,GAAf,CAAmBN,CAAnB,CACH,CACJ,CAzCD,EA4CA,GAAIO,CAAAA,CAAU,CAAG9B,QAAQ,CAACC,aAAT,CAAuB,cAAvB,CAAjB,CACA6B,CAAU,CAAC5B,gBAAX,CAA4B,OAA5B,CAAqC,UAAM,CAoB1C,CApBD,CAqBH,C","sourcesContent":["//import jQuery from 'jquery';\n\nexport const init = () => {\n    // Allow highlighted notes to be saved\n    let container = document.querySelector('.annotation-container');\n    container.addEventListener('mouseup', () => {\n        let selection = window.getSelection();\n        // Get properties for annotation object to store\n        // as long as the selection includes at least\n        // one character.\n        if(selection.type == 'Range') {\n            // If the anchor node of the selection is not\n            // an \"element\" node type (1), work through its\n            // parent nodes until the appropriate node type is found.\n            let anchor = selection.anchorNode;\n            while(anchor.nodeType != 1) {\n                anchor = anchor.parentNode;\n            }\n            // Now that we have the element node, grab its index\n            let anchorElementIndex = anchor.getAttribute('id');\n            // We also need to store the index of the #text node\n            // in the context of the anchor parent node's childNodes array.\n            let anchorNodeIndex = Array.prototype.indexOf.call(anchor.childNodes, selection.anchorNode);\n\n            // Do the same for the focus node.\n            let focus = selection.focusNode;\n            while(focus.nodeType != 1) {\n                focus = focus.parentNode;\n            }\n            // Now that we have the element node, grab its index\n            let focusElementIndex = focus.getAttribute('id');\n            // Again, get the index of the child #text node\n            let focusNodeIndex = Array.prototype.indexOf.call(focus.childNodes, selection.focusNode);\n\n            // Assemble a storable annotation object\n            let annotation = {\n                anchorElementIndex: anchorElementIndex,\n                anchorOffset: selection.anchorOffset,\n                anchorNodeIndex: anchorNodeIndex,\n                focusElementIndex: focusElementIndex,\n                focusOffset: selection.focusOffset,\n                focusNodeIndex: focusNodeIndex,\n                text: selection.toString()\n            };\n            window.console.log(annotation);\n        }\n    });\n\n    // Allow saved notes to be retrieved\n    let loadButton = document.querySelector('.load-button');\n    loadButton.addEventListener('click', () => {\n        // Dummy annotation object for testing\n        // let annotation = {\n        //     anchorIndex: '13',\n        //     anchorOffset: 308,\n        //     focusIndex: '13',\n        //     focusOffset: 324,\n        //     text: 'im et ante moles'\n        // };\n\n        // let anchor = document.querySelector(`[data-index=\"${annotation.anchorIndex}\"]`);\n        // let focus = document.querySelector(`[data-index=\"${annotation.focusIndex}\"]`);\n\n        // We have to find the index of the appropriate child node\n        // of the anchor and focus nodes. There can be many child nodes\n        // for one element node, but each has a \"length\" property.\n        // So we need to compare the offset property to each element's\n        // length property in the anchor.childNodes array to find the correct\n        // child node.\n        // let anchorText = anchor.childNodes[0];\n    });\n};"],"file":"test.min.js"}